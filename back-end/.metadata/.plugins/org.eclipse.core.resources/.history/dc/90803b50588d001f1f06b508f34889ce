package com.hacka.controllers;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.hacka.dto.PortfolioDTO;
import com.hacka.entities.Portfolio;
import com.hacka.services.PortfolioService;

import jakarta.persistence.criteria.Path;

@RestController
@RequestMapping("/portfolios")
@CrossOrigin(origins = "http://localhost:5173")
public class PortfolioController {

    @Autowired
    private PortfolioService service;

    @PostMapping("/criarPortfolio")
    public ResponseEntity<Portfolio> criarPortfolio(
            @RequestPart("portfolio") PortfolioDTO portfolioDTO,
            @RequestPart(value = "imagem", required = false) MultipartFile imagem) {

        try {
            String nomeArquivo = null;

            // Se a imagem foi enviada, salvamos no sistema de arquivos
            if (imagem != null && !imagem.isEmpty()) {
                nomeArquivo = System.currentTimeMillis() + "_" + imagem.getOriginalFilename();
                String diretorio = "imagens/"; // Diretório onde as imagens serão salvas
                Path caminho = Paths.get(diretorio + nomeArquivo);
                Files.createDirectories(caminho.getParent()); // Cria diretório, se necessário
                Files.write(caminho, imagem.getBytes()); // Salva a imagem no sistema de arquivos
            }

            // Cria o portfólio com o nome do arquivo armazenado
            Portfolio portfolio = service.criarPortfolio(
                    portfolioDTO.getTitulo(),
                    portfolioDTO.getLink(),
                    portfolioDTO.getDescricao(),
                    portfolioDTO.getCriador(),
                    portfolioDTO.getTags(),
                    nomeArquivo
            );

            return ResponseEntity.ok(portfolio);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().build(); // Retorna 400 em caso de erro
        }
    }


    @GetMapping("/acharTodos")
    public List<Portfolio> acharTodos() {
        return service.acharTodos();
    }

    @GetMapping("/meusProjetos/{id}")
    public List<Portfolio> meusProjetos(@PathVariable Long id) {
        return service.meusProjetos(id);
    }

    @GetMapping("/pesquisaTag/{id}")
    public List<Portfolio> pesquisaTag(@PathVariable Long id) {
        return service.pesquisaTag(id);
    }

    @GetMapping("/abrirProjeto/{id}")
    public Portfolio abrirProjeto(@PathVariable Long id) {
        return service.abrirProjeto(id);
    }
}
